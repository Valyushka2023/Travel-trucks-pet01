// import { useState, useEffect, useRef } from 'react';
// import { useTranslation } from 'react-i18next';
// import PropTypes from 'prop-types';
// import css from './FilterVehicleEquipment.module.css';

// const filterButtons = [
//   { icon: 'AC', label: 'AC', ariaLabel: '–ö–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä', type: 'boolean' },
//   {
//     icon: 'transmission',
//     label: 'Automatic',
//     ariaLabel: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á',
//     type: 'string',
//   },
//   { icon: 'kitchen', label: 'Kitchen', ariaLabel: '–ö—É—Ö–Ω—è', type: 'boolean' },
//   { icon: 'TV', label: 'TV', ariaLabel: '–¢–µ–ª–µ–≤—ñ–∑–æ—Ä', type: 'boolean' },
//   {
//     icon: 'bathroom',
//     label: 'Bathroom',
//     ariaLabel: '–í–∞–Ω–Ω–∞ –∫—ñ–º–Ω–∞—Ç–∞',
//     type: 'boolean',
//   },
// ];

// const FilterVehicleEquipment = ({ onFilter, currentFilters }) => {
//   const { t } = useTranslation('filter_vehicle_equipment');
//   // currentFilters –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ –ø—Ä–æ–ø
//   // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useEffect –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä–æ–ø—É currentFilters
//   const prevFiltersRef = useRef(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ—Ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö currentFilters, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤

//   useEffect(() => {
//     // –¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω `filters` –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î `currentFilters` –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
//     // –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó –∞–±–æ –¥—ñ—ó –æ—á–∏—â–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
//     if (
//       JSON.stringify(currentFilters) !== JSON.stringify(prevFiltersRef.current)
//     ) {
//       setFilters(currentFilters);
//     }
//   }, [currentFilters]);

//   useEffect(() => {
//     prevFiltersRef.current = currentFilters;
//   });

//   const [filters, setFilters] = useState(currentFilters); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑ currentFilters

//   const handleFilterChange = (filterName, type) => {
//     const updatedFilters = { ...filters };

//     const button = filterButtons.find(button => button.icon === filterName);

//     if (type === 'string') {
//       const newValue =
//         updatedFilters[filterName] === button.label ? null : button.label;
//       updatedFilters[filterName] = newValue;
//     } else if (type === 'boolean') {
//       updatedFilters[filterName] = !updatedFilters[filterName];
//     }

//     setFilters(updatedFilters);
//     onFilter(updatedFilters);
//   };

//   return (
//     <div className={css['vehicle-equipment']}>
//       <h3 className={css['text-equipment']}>{t('vehicle_equipment')}</h3>
//       <hr className={css.divider} />

//       <div className={css['equipment-container']}>
//         {filterButtons.map(button => (
//           <button
//             key={button.icon}
//             className={`${css['raw-icon']} ${button.label.includes(' ') ? css.multiLine : ''} ${
//               (button.type === 'boolean' && currentFilters[button.icon]) ||
//               (button.type === 'string' &&
//                 currentFilters[button.icon] === button.label)
//                 ? css.active
//                 : ''
//             }`}
//             aria-label={button.ariaLabel}
//             onClick={() => handleFilterChange(button.icon, button.type)}
//           >
//             <svg className={css.icon}>
//               <use href={`/icons.svg#icon-icon-button-${button.icon}`}></use>
//             </svg>
//             <span className={css['icon-text']}>{button.label}</span>
//           </button>
//         ))}
//       </div>
//     </div>
//   );
// };

// FilterVehicleEquipment.propTypes = {
//   onFilter: PropTypes.func.isRequired,
//   currentFilters: PropTypes.object.isRequired, // –î–æ–¥–∞—î–º–æ propType –¥–ª—è currentFilters
// };

// export default FilterVehicleEquipment;
import { useState, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import PropTypes from 'prop-types';
import css from './FilterVehicleEquipment.module.css';

const filterButtons = [
  // ‚úÖ –î–æ–¥–∞–Ω–æ ariaLabelKey –∑–∞–º—ñ—Å—Ç—å –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–æ–≥–æ ariaLabel
  {
    icon: 'AC',
    labelKey: 'label_ac',
    label: 'AC',
    ariaLabelKey: 'aria_ac', // üëà –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á
    type: 'boolean',
  },
  {
    icon: 'transmission',
    labelKey: 'label_transmission',
    label: 'Automatic',
    ariaLabelKey: 'aria_transmission', // üëà –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á
    type: 'string',
  },
  {
    icon: 'kitchen',
    labelKey: 'label_kitchen',
    label: 'Kitchen',
    ariaLabelKey: 'aria_kitchen', // üëà –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á
    type: 'boolean',
  },
  {
    icon: 'TV',
    labelKey: 'label_tv',
    label: 'TV',
    ariaLabelKey: 'aria_tv', // üëà –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á
    type: 'boolean',
  },
  {
    icon: 'bathroom',
    labelKey: 'label_bathroom',
    label: 'Bathroom',
    ariaLabelKey: 'aria_bathroom', // üëà –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á
    type: 'boolean',
  },
];

const FilterVehicleEquipment = ({ onFilter, currentFilters }) => {
  const { t } = useTranslation('filter_vehicle_equipment');
  // currentFilters –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ –ø—Ä–æ–ø
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useEffect –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä–æ–ø—É currentFilters
  const prevFiltersRef = useRef(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ—Ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö currentFilters, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤

  useEffect(() => {
    // –¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω `filters` –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î `currentFilters` –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    // –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó –∞–±–æ –¥—ñ—ó –æ—á–∏—â–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
    if (
      JSON.stringify(currentFilters) !== JSON.stringify(prevFiltersRef.current)
    ) {
      setFilters(currentFilters);
    }
  }, [currentFilters]);

  useEffect(() => {
    prevFiltersRef.current = currentFilters;
  });

  const [filters, setFilters] = useState(currentFilters); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑ currentFilters

  const handleFilterChange = (filterName, type) => {
    const updatedFilters = { ...filters };

    const button = filterButtons.find(button => button.icon === filterName);

    if (type === 'string') {
      // –î–ª—è string (transmission) –º–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ñ—ñ–ª—å—Ç—Ä–∞—Ö –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ –∑–Ω–∞—á–µ–Ω–Ω—è
      // (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Automatic'), –∞ –Ω–µ –π–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥.
      const originalLabel = button.label;
      const newValue =
        updatedFilters[filterName] === originalLabel ? null : originalLabel;
      updatedFilters[filterName] = newValue;
    } else if (type === 'boolean') {
      updatedFilters[filterName] = !updatedFilters[filterName];
    }

    setFilters(updatedFilters);
    onFilter(updatedFilters);
  };

  return (
    <div className={css['vehicle-equipment']}>
      <h3 className={css['text-equipment']}>{t('vehicle_equipment')}</h3>
      <hr className={css.divider} />

      <div className={css['equipment-container']}>
        {filterButtons.map(button => (
          <button
            key={button.icon}
            className={`${css['raw-icon']} ${
              // –£–º–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É —Ç–µ–ø–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
              t(button.labelKey).includes(' ') ? css.multiLine : ''
            } ${
              (button.type === 'boolean' && currentFilters[button.icon]) ||
              (button.type === 'string' &&
                // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º label –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
                currentFilters[button.icon] === button.label)
                ? css.active
                : ''
            }`}
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û A11y: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á –¥–ª—è aria-label, —â–æ–± –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
            aria-label={t(button.ariaLabelKey)}
            onClick={() => handleFilterChange(button.icon, button.type)}
          >
            <svg className={css.icon}>
              <use href={`/icons.svg#icon-icon-button-${button.icon}`}></use>
            </svg>
            {/* ‚úÖ –û–°–ù–û–í–ù–ò–ô –ü–ï–†–ï–ö–õ–ê–î */}
            <span className={css['icon-text']}>{t(button.labelKey)}</span>
          </button>
        ))}
      </div>
    </div>
  );
};

FilterVehicleEquipment.propTypes = {
  onFilter: PropTypes.func.isRequired,
  currentFilters: PropTypes.object.isRequired, // –î–æ–¥–∞—î–º–æ propType –¥–ª—è currentFilters
};

export default FilterVehicleEquipment;
