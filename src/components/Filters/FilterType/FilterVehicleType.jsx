// import { useState, useEffect, useRef } from 'react';
// import { useTranslation } from 'react-i18next';
// import PropTypes from 'prop-types';
// import css from './FilterVehicleType.module.css';

// const filterButtons = [
//   { icon: 'van', label: 'Van', ariaLabel: '–§—É—Ä–≥–æ–Ω', isMultiLine: false },
//   {
//     icon: 'fullyIntegrated',
//     label: (
//       <>
//         Fully
//         <br />
//         Integrated
//       </>
//     ),
//     ariaLabel: '–ü–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π',
//     isMultiLine: true,
//   },
//   {
//     icon: 'alcove',
//     label: 'Alcove',
//     ariaLabel: '–ê–ª—å—Ç–∞–Ω–∫–∞',
//     isMultiLine: false,
//   },
// ];

// const FilterVehicleType = ({ onFilter, currentFilters }) => {
//   const { t } = useTranslation('filter_vehicle_type');
//   // currentFilters –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ –ø—Ä–æ–ø
//   // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useEffect –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—Ä–æ–ø—É currentFilters
//   const prevFiltersRef = useRef(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ—Ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö currentFilters, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤

//   useEffect(() => {
//     // –¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω `filters` –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î `currentFilters` –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
//     // –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó –∞–±–æ –¥—ñ—ó –æ—á–∏—â–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.
//     if (
//       JSON.stringify(currentFilters) !== JSON.stringify(prevFiltersRef.current)
//     ) {
//       setFilters(currentFilters);
//     }
//   }, [currentFilters]);

//   useEffect(() => {
//     prevFiltersRef.current = currentFilters;
//   });

//   const [filters, setFilters] = useState(currentFilters); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑ currentFilters

//   const handleFilterChange = filterName => {
//     const updatedFilters = { ...filters };
//     updatedFilters[filterName] = !updatedFilters[filterName];

//     setFilters(updatedFilters);
//     onFilter(updatedFilters);
//   };

//   return (
//     <div className={css['vehicle-type']}>
//       <h3 className={css['text-type']}>{t('vehicle_type')}</h3>
//       <hr className={css.divider} />
//       <div className={css['type-container']}>
//         {filterButtons.map(button => (
//           <button
//             key={button.icon}
//             className={`${css['raw-icon']} ${button.isMultiLine ? css.multiLine : ''} ${
//               currentFilters[button.icon] ? css.active : ''
//             }`}
//             /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ currentFilters –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É */
//             aria-label={button.ariaLabel}
//             onClick={() => handleFilterChange(button.icon)}
//           >
//             <svg className={css.icon}>
//               <use href={`/icons.svg#icon-icon-button-${button.icon}`}></use>
//             </svg>
//             <span className={css['icon-text']}>{button.label}</span>
//           </button>
//         ))}
//       </div>
//     </div>
//   );
// };

// FilterVehicleType.propTypes = {
//   onFilter: PropTypes.func.isRequired,
//   currentFilters: PropTypes.object.isRequired, // –î–æ–¥–∞—î–º–æ propType –¥–ª—è currentFilters
// };

// export default FilterVehicleType;
import { useState, useEffect, useRef } from 'react';
import { useTranslation, Trans } from 'react-i18next'; // <-- –Ü–ú–ü–û–†–¢–£–Ñ–ú–û Trans
import PropTypes from 'prop-types';
import css from './FilterVehicleType.module.css';

const filterButtons = [
  {
    icon: 'panelTruck',
    labelKey: 'label_panel-truck',
    ariaLabelKey: 'aria_panel-truck',
    isMultiLine: false,
  },

  {
    icon: 'fullyIntegrated',
    labelKey: 'label_fully_integrated',
    ariaLabelKey: 'aria_fully_integrated',
    isMultiLine: false,
  },
  {
    icon: 'alcove',
    labelKey: 'label_alcove',
    ariaLabelKey: 'aria_alcove',
    isMultiLine: false,
  },
];

const FilterVehicleType = ({ onFilter, currentFilters }) => {
  const { t } = useTranslation('filter_vehicle_type');
  const prevFiltersRef = useRef();

  useEffect(() => {
    if (
      JSON.stringify(currentFilters) !== JSON.stringify(prevFiltersRef.current)
    ) {
      setFilters(currentFilters);
    }
  }, [currentFilters]);

  useEffect(() => {
    prevFiltersRef.current = currentFilters;
  });

  const [filters, setFilters] = useState(currentFilters);

  const handleFilterChange = filterName => {
    const updatedFilters = { ...filters };
    updatedFilters[filterName] = !updatedFilters[filterName];

    setFilters(updatedFilters);
    onFilter(updatedFilters);
  };

  return (
    <div className={css['vehicle-type']}>
      <h3 className={css['text-type']}>{t('vehicle_type')}</h3>
      <hr className={css.divider} />
      <div className={css['type-container']}>
        {filterButtons.map(button => (
          <button
            key={button.icon}
            className={`${css['raw-icon']} ${button.isMultiLine ? css.multiLine : ''} ${
              currentFilters[button.icon] ? css.active : ''
            }`}
            aria-label={t(button.ariaLabelKey)}
            onClick={() => handleFilterChange(button.icon)}
          >
            <svg className={css.icon}>
              <use href={`/icons.svg#icon-icon-button-${button.icon}`}></use>
            </svg>
            <span className={css['icon-text']}>
              {button.isMultiLine ? (
                // üü¢ –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û Trans –î–õ–Ø –ë–ê–ì–ê–¢–û–†–Ø–î–ö–û–í–û–ì–û –¢–ï–ö–°–¢–£
                <Trans i18nKey={button.labelKey} components={{ br: <br /> }} />
              ) : (
                // –ó–≤–∏—á–∞–π–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥
                t(button.labelKey)
              )}
            </span>
          </button>
        ))}
      </div>
    </div>
  );
};

FilterVehicleType.propTypes = {
  onFilter: PropTypes.func.isRequired,
  currentFilters: PropTypes.object.isRequired,
};

export default FilterVehicleType;
