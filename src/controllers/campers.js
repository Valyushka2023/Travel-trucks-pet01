// import Camper from '../models/CamperModel.js';
// import mongoose from 'mongoose';

// // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–µ–º–ø–µ—Ä—ñ–≤
// export const getCampers = async (req, res) => {
//   try {
//     const campers = await Camper.find(); // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó 'campers'
//     res.json(campers);
//   } catch (error) {
//     res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
//   }
// };

// // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–º–ø–µ—Ä–∞ –∑–∞ ID
// export const getCamperById = async (req, res) => {
//   try {
//     const camper = await Camper.aggregate([
//       {
//         $match: { _id: new mongoose.Types.ObjectId(req.params.id) },
//       },
//       {
//         $project: {
//           _id: 1,
//           name: 1,
//           description: 1,
//           price: 1,
//           rating: 1,
//           location: 1,
//           id: 1,
//           form: 1,
//           length: 1,
//           width: 1,
//           height: 1,
//           tank: 1,
//           consumption: 1,
//           transmission: 1,
//           engine: 1,
//           AC: 1,
//           bathroom: 1,
//           kitchen: 1,
//           TV: 1,
//           radio: 1,
//           refrigerator: 1,
//           microwave: 1,
//           gas: 1,
//           water: 1,
//           gallery: 1,
//           reviews: {
//             $sortArray: {
//               input: '$reviews',
//               sortBy: { createdAt: -1 },
//             },
//           },
//         },
//       },
//     ]);

//     if (!camper || camper.length === 0) {
//       return res.status(404).json({ message: '–ö–µ–º–ø–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
//     }

//     res.json(camper[0]);
//   } catch (error) {
//     res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
//   }
// };

// // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–º–ø–µ—Ä–∞
// export const addReview = async (req, res) => {
//   const { camperId } = req.params; // –û—Ç—Ä–∏–º—É—î–º–æ id –∫–µ–º–ø–µ—Ä–∞ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
//   const { reviewer_name, reviewer_rating, comment, email } = req.body; // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥–≥—É–∫—É –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É

//   try {
//     // –®—É–∫–∞—î–º–æ –∫–µ–º–ø–µ—Ä–∞ –∑–∞ id
//     const camper = await Camper.findById(camperId);
//     if (!camper) {
//       return res
//         .status(404)
//         .json({ success: false, message: '–ö–µ–º–ø–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });

//       // return res.status(404).json({ message: '–ö–µ–º–ø–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
//     }

//     // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≤—ñ–¥–≥—É–∫–∞, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–±—É–¥–æ–≤–∞–Ω—ñ–π —Å—Ö–µ–º—ñ
//     const newReview = {
//       reviewer_name,
//       reviewer_rating,
//       comment,
//       email,
//       createdAt: new Date(),
//     };

//     // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É –≤—ñ–¥–≥—É–∫—ñ–≤
//     camper.reviews.unshift(newReview);

//     // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥
//     let totalRating = 0;
//     if (camper.reviews.length > 0) {
//       totalRating = camper.reviews.reduce(
//         (sum, review) => sum + review.reviewer_rating,
//         0
//       );
//     }
//     const averageRating =
//       camper.reviews.length > 0 ? totalRating / camper.reviews.length : 0;
//     camper.rating = averageRating;

//     // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∫–µ–º–ø–µ—Ä–∞
//     await camper.save();

//     res.status(201).json({
//       success: true,
//       message: '–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
//       camper: camper,
//     });
//   } catch (error) {
//     if (error.name === 'ValidationError') {
//       return res.status(400).json({
//         success: false,
//         message: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.",
//       });
//     }
//     res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
//   }
// };
import Camper from '../models/CamperModel.js';
import mongoose from 'mongoose';

// =========================================================================
// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–µ–º–ø–µ—Ä—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä–µ–∫–ª–∞–¥—É (–ë–ï–ó –ó–ú–Ü–ù)
// =========================================================================
export const getCampers = async (req, res) => {
  try {
    const langCode = req.query.lang || 'en';
    let campers = await Camper.find().lean();

    const translatedCampers = campers.map(camper => {
      let descriptionToUse = camper.description;

      if (langCode === 'uk' && camper.description_uk) {
        descriptionToUse = camper.description_uk;
      }

      const translatedCamper = {
        ...camper,
        description: descriptionToUse,
      };

      delete translatedCamper.description_uk;
      return translatedCamper;
    });

    res.json(translatedCampers);
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
  }
};

// =========================================================================
// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–º–ø–µ—Ä–∞ –∑–∞ ID: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –í–°–Ü –ø—Ä–æ–ø—É—â–µ–Ω—ñ –ø–æ–ª—è
// =========================================================================
export const getCamperById = async (req, res) => {
  try {
    // 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–≤–∏ –∑ query parameters
    const langCode = req.query.lang || 'en';

    const camper = await Camper.aggregate([
      {
        $match: { _id: new mongoose.Types.ObjectId(req.params.id) },
      },
      {
        $project: {
          _id: 1,
          name: 1,
          // üí• –õ–û–ì–Ü–ö–ê –ü–ï–†–ï–ö–õ–ê–î–£ (–ù–û–í–ï)
          description: {
            $cond: {
              if: {
                $and: [
                  { $eq: [langCode, 'uk'] },
                  { $ne: ['$description_uk', null] },
                ],
              },
              then: '$description_uk',
              else: '$description',
            },
          },
          price: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          rating: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          location: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          id: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          form: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          length: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          width: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          height: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          tank: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          consumption: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          transmission: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          engine: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          AC: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û (–¥–ª—è —ñ–∫–æ–Ω–æ–∫)
          bathroom: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û (–¥–ª—è —ñ–∫–æ–Ω–æ–∫)
          kitchen: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û (–¥–ª—è —ñ–∫–æ–Ω–æ–∫)
          TV: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          radio: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          refrigerator: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          microwave: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          gas: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          water: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
          gallery: 1, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û (–¥–ª—è –≥–∞–ª–µ—Ä–µ—ó)
          reviews: {
            $sortArray: {
              input: '$reviews',
              sortBy: { createdAt: -1 },
            },
          }, // ‚úÖ –í–Ü–î–ù–û–í–õ–ï–ù–û
        },
      },
    ]);

    if (!camper || camper.length === 0) {
      return res.status(404).json({ message: '–ö–µ–º–ø–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
    }

    res.json(camper[0]);
  } catch (error) {
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
  }
};

// =========================================================================
// –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É (–ë–ï–ó –ó–ú–Ü–ù)
// =========================================================================
export const addReview = async (req, res) => {
  const { camperId } = req.params;
  const { reviewer_name, reviewer_rating, comment, email } = req.body;

  try {
    const camper = await Camper.findById(camperId);
    if (!camper) {
      return res
        .status(404)
        .json({ success: false, message: '–ö–µ–º–ø–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
    }

    const newReview = {
      reviewer_name,
      reviewer_rating,
      comment,
      email,
      createdAt: new Date(),
    };

    camper.reviews.unshift(newReview);

    let totalRating = 0;
    if (camper.reviews.length > 0) {
      totalRating = camper.reviews.reduce(
        (sum, review) => sum + review.reviewer_rating,
        0
      );
    }
    const averageRating =
      camper.reviews.length > 0 ? totalRating / camper.reviews.length : 0;
    camper.rating = averageRating;

    await camper.save();

    res.status(201).json({
      success: true,
      message: '–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ',
      camper: camper,
    });
  } catch (error) {
    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.",
      });
    }
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error });
  }
};
